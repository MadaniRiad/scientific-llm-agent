import fitz  # PyMuPDF
from pathlib import Path
import os
from dotenv import load_dotenv
import openai

# Charger les variables d'environnement
load_dotenv()

# Cr√©er un client OpenAI (nouveau style SDK 1.x)
client = openai.OpenAI(api_key=os.getenv("OPENAI_API_KEY"))

def extract_text_from_pdf(pdf_path):
    doc = fitz.open(pdf_path)
    text = ""
    for page in doc:
        text += page.get_text()
    return text

def summarize_text(text, model="gpt-3.5-turbo", max_tokens=1000):
    prompt = (
        "R√©sume le contenu scientifique suivant de fa√ßon claire et structur√©e :\n\n"
        f"{text[:3000]}"
    )

    try:
        response = client.chat.completions.create(
            model=model,
            messages=[
                {"role": "system", "content": "Tu es un assistant expert en r√©sum√© d‚Äôarticles scientifiques."},
                {"role": "user", "content": prompt}
            ],
            max_tokens=max_tokens,
            temperature=0.5,
        )
        return response.choices[0].message.content.strip()
    except Exception as e:
        print("‚ùå Erreur OpenAI :", e)
        return None

if __name__ == "__main__":
    pdf_path = "example.pdf"
    if not Path(pdf_path).exists():
        print(f"‚ö†Ô∏è Fichier {pdf_path} non trouv√©.")
    else:
        full_text = extract_text_from_pdf(pdf_path)
        print("üìÑ PDF charg√©. Envoi √† OpenAI pour r√©sum√©...\n")
        summary = summarize_text(full_text)
        if summary:
            print("‚úÖ R√©sum√© g√©n√©r√© :\n")
            print(summary)
